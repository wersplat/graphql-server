# GraphQL Schema for Bodega Cats GC API
# 
# This schema provides a unified GraphQL API for the Bodega Cats GC gaming platform.
# It serves as a layer between multiple frontends (admin, dashboard, public) and the Supabase backend.

"""
Custom scalar for handling date and time values in ISO 8601 format.
"""
scalar DateTime

"""
Custom scalar for handling UUID values.
"""
scalar UUID

"""
Custom scalar for handling JSON values.
"""
scalar JSON

"""
Custom scalar for handling BigInt values.
"""
scalar BigInt

"""
Custom scalar for handling BigFloat values.
"""
scalar BigFloat

"""
Represents a user in the Bodega Cats GC platform.
Users can have associated player profiles with gaming statistics.
"""
type User {
  "Unique identifier for the user"
  id: ID!
  "Username for login and display"
  username: String!
  "Email address for notifications and account management"
  email: String!
  "Full name of the user"
  fullName: String
  "Whether the user account is active"
  isActive: Boolean!
  "Whether the user has administrative privileges"
  isAdmin: Boolean!
  "Discord ID for integration with Discord"
  discordId: String
  "When the user account was created"
  createdAt: DateTime!
  "When the user account was last updated"
  updatedAt: DateTime
  "Associated player profile with gaming statistics"
  player: Player
}

"""
Represents a player profile with gaming statistics and achievements.
Each player is associated with a user account.
"""
type Player {
  "Unique identifier for the player"
  id: ID!
  "ID of the associated user account"
  userId: ID!
  "Gaming handle/username used in matches"
  gamertag: String!
  "Geographic region for matchmaking"
  region: String
  "Current ranking points"
  currentRp: Float
  "Highest ranking points achieved"
  peakRp: Float
  "Current player tier (bronze, silver, gold, etc.)"
  tier: PlayerTier
  "Player position on the court"
  position: PlayerPosition
  "Salary tier indicating player value"
  salaryTier: SalaryTier
  "Name of the team the player is currently on"
  teamName: String
  "Whether the player account has been verified"
  isVerified: Boolean
  "When the player profile was created"
  createdAt: DateTime!
  "When the player profile was last updated"
  updatedAt: DateTime
  "Associated user account"
  user: User!
  "Current team information"
  current_teams: Team
}

"""
Player tiers representing skill levels and achievements.
Higher tiers indicate better performance and more experience.
"""
enum PlayerTier {
  "Beginner level player"
  bronze
  "Intermediate level player"
  silver
  "Advanced level player"
  gold
  "Expert level player"
  platinum
  "Elite level player"
  diamond
  "Master level player"
  pink_diamond
  "Legendary level player"
  galaxy_opal
}

"""
Player positions on the court.
"""
enum PlayerPosition {
  "Point guard position"
  Point_Guard
  "Shooting guard position"
  Shooting_Guard
  "Lock position"
  Lock
  "Power forward position"
  Power_Forward
  "Center position"
  Center
}

"""
Salary tiers for players indicating their value and compensation level.
"""
enum SalaryTier {
  "Superstar tier"
  S
  "All-star tier"
  A
  "Starter tier"
  B
  "Role player tier"
  C
  "Bench tier"
  D
}

"""
Event tiers indicating the level and prestige of the competition.
"""
enum EventTier {
  "Tier 1 - Highest level events"
  T1
  "Tier 2 - High level events"
  T2
  "Tier 3 - Mid level events"
  T3
  "Tier 4 - Entry level events"
  T4
}

"""
Represents a competitive match between two teams.
Matches can be in various stages and have detailed statistics.
"""
type Match {
  "Unique identifier for the match"
  id: ID!
  "ID of the event this match belongs to"
  eventId: UUID
  "ID of the first team"
  teamAId: UUID!
  "ID of the second team"
  teamBId: UUID!
  "Name of the first team"
  teamAName: String!
  "Name of the second team"
  teamBName: String!
  "Current stage of the match (group, finals, etc.)"
  stage: MatchStage!
  "Game number within the match series"
  gameNumber: Int!
  "Current status of the match"
  status: MatchStatus!
  "Score for team A"
  scoreA: Int
  "Score for team B"
  scoreB: Int
  "ID of the winning team"
  winnerId: UUID
  "Name of the winning team"
  winnerName: String
  "When the match was scheduled to start"
  scheduledAt: DateTime
  "When the match was actually played"
  playedAt: DateTime
  "When the match started"
  startedAt: DateTime
  "When the match ended"
  endedAt: DateTime
  "URL to the match boxscore/stats"
  boxscoreUrl: String
  "When the match record was created"
  createdAt: DateTime!
  "When the match record was last updated"
  updatedAt: DateTime
  "Whether the match is currently being played live"
  isLive: Boolean!
  "Time elapsed in the current match (for live matches)"
  timeElapsed: String
  "Team A details"
  teamA: Team
  "Team B details"
  teamB: Team
  "Winning team details"
  winner: Team
  "Event details"
  event: Event
  "Player statistics for team A"
  teamAPlayers: [PlayerMatchStats!]!
  "Player statistics for team B"
  teamBPlayers: [PlayerMatchStats!]!
}

"""
Status of a match indicating its current state in the competition.
"""
enum MatchStatus {
  "Match is scheduled but not yet started"
  scheduled
  "Match is currently being played"
  in_progress
  "Match has finished"
  completed
  "Match was cancelled"
  cancelled
  "Match was postponed to a later date"
  postponed
}

"""
Stages of a tournament or competition indicating the round or phase.
"""
enum MatchStage {
  "Regular season matches"
  Regular_Season
  "Group stage matches"
  Group_Play
  "Round 1 matches"
  Round_1
  "Round 2 matches"
  Round_2
  "Round 3 matches"
  Round_3
  "Round 4 matches"
  Round_4
  "Semifinal matches"
  Semi_Finals
  "Championship final match"
  Finals
  "Grand championship final match"
  Grand_Finals
  "League level 1 matches"
  L1
  "League level 2 matches"
  L2
  "League level 3 matches"
  L3
  "League level 4 matches"
  L4
  "League level 5 matches"
  L5
  "Winner bracket round 1"
  W1
  "Winner bracket round 2"
  W2
  "Winner bracket round 3"
  W3
  "Winner bracket round 4"
  W4
  "Loser bracket final"
  LF
  "Winner bracket final"
  WF
}

"""
Represents a team in the Bodega Cats GC platform.
Teams compete in matches and tournaments.
"""
type Team {
  "Unique identifier for the team"
  id: ID!
  "Name of the team"
  name: String!
  "Description of the team"
  description: String
  "URL to the team logo"
  logoUrl: String
  "Geographic region the team represents"
  region: String
  "Whether the team is currently active"
  isActive: Boolean!
  "When the team was created"
  createdAt: DateTime!
  "When the team was last updated"
  updatedAt: DateTime
}

"""
Represents a tournament, league, or other competitive event.
Events contain multiple matches and have specific rules and prizes.
"""
type Event {
  "Unique identifier for the event"
  id: ID!
  "Name of the event"
  name: String!
  "Description of the event"
  description: String
  "Type of event (tournament, league, etc.)"
  eventType: EventType
  "Tier level of the event"
  tier: EventTier
  "Current status of the event"
  status: EventStatus
  "Entry fee to participate in the event"
  entryFee: Float!
  "Maximum number of participants allowed"
  maxParticipants: Int
  "Current number of registered participants"
  currentParticipants: Int!
  "When the event starts"
  startDate: DateTime
  "When the event ends"
  endDate: DateTime
  "ID of the user who created the event"
  createdBy: ID!
  "When the event was created"
  createdAt: DateTime!
  "When the event was last updated"
  updatedAt: DateTime
}

"""
Types of competitive events in the platform.
"""
enum EventType {
  "League event with regular season matches"
  League
  "Single elimination or double elimination tournament"
  Tournament
}

"""
Status of an event indicating its current phase.
"""
enum EventStatus {
  "Event is in draft mode and not yet published"
  draft
  "Event is open for registration"
  open
  "Event registration is closed"
  registration_closed
  "Event is currently running"
  in_progress
  "Event has finished"
  completed
  "Event was cancelled"
  cancelled
}

"""
Detailed statistics for a player in a specific match.
These stats are used for rankings and performance analysis.
"""
type PlayerMatchStats {
  "Unique identifier for the stats record"
  id: ID!
  "ID of the match these stats belong to"
  matchId: ID!
  "ID of the player these stats belong to"
  playerId: ID!
  "ID of the team the player was on"
  teamId: ID!
  "Total points scored"
  points: Int!
  "Number of assists"
  assists: Int!
  "Number of rebounds"
  rebounds: Int!
  "Number of steals"
  steals: Int!
  "Number of blocks"
  blocks: Int!
  "Number of turnovers"
  turnovers: Int!
  "Number of fouls"
  fouls: Int!
  "Field goals made"
  fgm: Int!
  "Field goals attempted"
  fga: Int!
  "Three-point shots made"
  threePointsMade: Int!
  "Three-point shots attempted"
  threePointsAttempted: Int!
  "Free throws made"
  ftm: Int!
  "Free throws attempted"
  fta: Int!
  "Plus/minus rating"
  plusMinus: Int!
  "Minutes played in the match"
  minutesPlayed: Int!
  "When the stats record was created"
  createdAt: DateTime!
  "When the stats record was last updated"
  updatedAt: DateTime
}

# =============================================================================
# PHASE 1: BASIC ANALYTICS TYPES
# =============================================================================

"""
Basic dashboard statistics.
"""
type DashboardStats {
  "Total number of players"
  totalPlayers: Int!
  "Total number of teams"
  totalTeams: Int!
  "Total number of matches"
  totalMatches: Int!
  "Total number of events"
  totalEvents: Int!
  "Number of active players"
  activePlayers: Int!
  "Number of active teams"
  activeTeams: Int!
  "Number of completed matches"
  completedMatches: Int!
  "Number of upcoming events"
  upcomingEvents: Int!
  "Average player RP"
  averagePlayerRP: Float!
  "Average team size"
  averageTeamSize: Float!
  "Top performing player"
  topPerformingPlayer: Player
  "Most active team"
  mostActiveTeam: Team
  "Recent matches"
  recentMatches: [Match!]!
  "Recent players"
  recentPlayers: [Player!]!
}

"""
Basic leaderboard entry.
"""
type LeaderboardEntry {
  "Player's rank"
  rank: Int!
  "Player information"
  player: Player!
  "Number of wins"
  wins: Int!
  "Number of losses"
  losses: Int!
  "Win rate percentage"
  winRate: Float!
  "Total matches played"
  totalMatches: Int!
  "Average points per game"
  averagePoints: Float!
  "Average assists per game"
  averageAssists: Float!
  "Average rebounds per game"
  averageRebounds: Float!
}

"""
Sort options for leaderboard.
"""
enum LeaderboardSortBy {
  "Sort by current RP"
  CURRENT_RP
  "Sort by peak RP"
  PEAK_RP
  "Sort by number of wins"
  WINS
  "Sort by win rate"
  WIN_RATE
  "Sort by average points"
  AVERAGE_POINTS
  "Sort by average assists"
  AVERAGE_ASSISTS
  "Sort by average rebounds"
  AVERAGE_REBOUNDS
}

"""
Time range options for analytics.
"""
enum TimeRange {
  "Last 7 days"
  LAST_7_DAYS
  "Last 30 days"
  LAST_30_DAYS
  "Last 90 days"
  LAST_90_DAYS
  "Last 6 months"
  LAST_6_MONTHS
  "Last year"
  LAST_YEAR
  "All time"
  ALL_TIME
}

# =============================================================================
# INPUT TYPES
# =============================================================================

"""
Input type for creating a new match.
"""
input MatchInput {
  "ID of the event this match belongs to"
  eventId: UUID!
  "Game number within the event"
  gameNumber: Int!
  "When the match is scheduled to start"
  scheduledAt: DateTime!
  "Match stage (group, quarterfinal, semifinal, final)"
  stage: MatchStage!
  "ID of team A"
  teamAId: ID!
  "Name of team A"
  teamAName: String!
  "ID of team B"
  teamBId: ID!
  "Name of team B"
  teamBName: String!
  "Optional venue where the match will be played"
  venue: String
  "Optional stream URL for the match"
  streamUrl: String
  "Optional notes about the match"
  notes: String
}

"""
Input type for updating an existing match.
"""
input MatchUpdateInput {
  "Updated event ID"
  eventId: UUID
  "Updated game number"
  gameNumber: Int
  "Updated scheduled time"
  scheduledAt: DateTime
  "Updated match stage"
  stage: MatchStage
  "Updated team A ID"
  teamAId: ID
  "Updated team A name"
  teamAName: String
  "Updated team B ID"
  teamBId: ID
  "Updated team B name"
  teamBName: String
  "Updated venue"
  venue: String
  "Updated stream URL"
  streamUrl: String
  "Updated notes"
  notes: String
  "Updated match status"
  status: MatchStatus
  "Updated start time"
  startedAt: DateTime
  "Updated end time"
  endedAt: DateTime
  "Updated score for team A"
  scoreA: Int
  "Updated score for team B"
  scoreB: Int
  "Updated winner ID"
  winnerId: ID
  "Updated winner name"
  winnerName: String
  "Updated boxscore URL"
  boxscoreUrl: String
}

"""
Input type for player match statistics.
"""
input PlayerMatchStatsInput {
  "ID of the player"
  playerId: ID!
  "ID of the team the player is on"
  teamId: ID!
  "Points scored"
  points: Int!
  "Assists made"
  assists: Int!
  "Rebounds grabbed"
  rebounds: Int!
  "Steals made"
  steals: Int!
  "Blocks made"
  blocks: Int!
  "Turnovers committed"
  turnovers: Int!
  "Fouls committed"
  fouls: Int!
  "Field goals made"
  fgm: Int!
  "Field goals attempted"
  fga: Int!
  "Three-point shots made"
  threePointsMade: Int!
  "Three-point shots attempted"
  threePointsAttempted: Int!
  "Free throws made"
  ftm: Int!
  "Free throws attempted"
  fta: Int!
  "Plus/minus rating"
  plusMinus: Int!
  "Minutes played"
  minutesPlayed: Int!
}

"""
Input type for creating a new player.
"""
input PlayerInput {
  "ID of the associated user account"
  userId: ID!
  "Gaming handle/username used in matches"
  gamertag: String!
  "Geographic region for matchmaking"
  region: String
  "Player position on the court"
  position: PlayerPosition
  "Salary tier indicating player value"
  salaryTier: SalaryTier
  "Name of the team the player is currently on"
  teamName: String
  "Whether the player account has been verified"
  isVerified: Boolean = false
}

"""
Input type for updating an existing player.
"""
input PlayerUpdateInput {
  "Updated gaming handle"
  gamertag: String
  "Updated geographic region"
  region: String
  "Updated current ranking points"
  currentRp: Float
  "Updated highest ranking points achieved"
  peakRp: Float
  "Updated player tier"
  tier: PlayerTier
  "Updated player position"
  position: PlayerPosition
  "Updated salary tier"
  salaryTier: SalaryTier
  "Updated team name"
  teamName: String
  "Updated verification status"
  isVerified: Boolean
}

"""
Input type for creating a new team.
"""
input TeamInput {
  "Team name"
  name: String!
  "Team description"
  description: String
  "URL to team logo"
  logoUrl: String
  "Geographic region"
  region: String
  "Whether the team is active"
  isActive: Boolean = true
}

"""
Input type for updating an existing team.
"""
input TeamUpdateInput {
  "Updated team name"
  name: String
  "Updated team description"
  description: String
  "Updated logo URL"
  logoUrl: String
  "Updated region"
  region: String
  "Updated active status"
  isActive: Boolean
}

"""
Input type for creating a new event.
"""
input EventInput {
  "Event name"
  name: String!
  "Event description"
  description: String
  "Type of event"
  eventType: EventType!
  "Event tier"
  tier: EventTier!
  "When the event starts"
  startDate: DateTime!
  "When the event ends"
  endDate: DateTime!
  "Entry fee for participants"
  entryFee: Float
  "Maximum number of participants"
  maxParticipants: Int
  "ID of the user who created the event"
  createdBy: ID!
}

"""
Input type for updating an existing event.
"""
input EventUpdateInput {
  "Updated event name"
  name: String
  "Updated event description"
  description: String
  "Updated event type"
  eventType: EventType
  "Updated event tier"
  tier: EventTier
  "Updated start date"
  startDate: DateTime
  "Updated end date"
  endDate: DateTime
  "Updated entry fee"
  entryFee: Float
  "Updated max participants"
  maxParticipants: Int
  "Updated event status"
  status: EventStatus
}

"""
Input type for creating a new user.
"""
input UserInput {
  "Username for login and display"
  username: String!
  "Email address for notifications and account management"
  email: String!
  "Full name of the user"
  fullName: String
  "Whether the user account is active (defaults to true)"
  isActive: Boolean = true
  "Whether the user has administrative privileges (defaults to false)"
  isAdmin: Boolean = false
  "Discord ID for integration with Discord"
  discordId: String
}

"""
Input type for updating an existing user.
"""
input UserUpdateInput {
  "Updated username"
  username: String
  "Updated email address"
  email: String
  "Updated full name"
  fullName: String
  "Updated active status"
  isActive: Boolean
  "Updated admin privileges"
  isAdmin: Boolean
  "Updated Discord ID"
  discordId: String
}

# =============================================================================
# QUERY TYPE
# =============================================================================

"""
Root query type for the Bodega Cats GC GraphQL API.
Provides access to all read operations for users, matches, teams, events, and players.
"""
type Query {
  # User queries
  "Get a specific user by ID"
  getUser(id: ID!): User
  "Get a list of users with pagination"
  getUsers(limit: Int = 10, offset: Int = 0): [User!]!
  
  # Match queries
  "Get a specific match by ID"
  getMatch(id: ID!): Match
  "Get a list of matches with optional filtering and pagination"
  getMatches(
    "Filter by team ID (returns matches where this team participated)"
    teamId: ID
    "Filter by event ID"
    eventId: UUID
    "Filter by match status"
    status: MatchStatus
    "Filter by match stage"
    stage: MatchStage
    "Maximum number of matches to return (defaults to 20)"
    limit: Int = 20
    "Number of matches to skip for pagination (defaults to 0)"
    offset: Int = 0
  ): [Match!]!
  
  # Team queries
  "Get a specific team by ID"
  getTeam(id: ID!): Team
  "Get a list of teams with pagination"
  getTeams(limit: Int = 10, offset: Int = 0): [Team!]!
  
  # Event queries
  "Get a specific event by ID"
  getEvent(id: ID!): Event
  "Get a list of events with optional filtering and pagination"
  getEvents(
    "Filter by event status"
    status: EventStatus
    "Filter by event type"
    eventType: EventType
    "Maximum number of events to return (defaults to 10)"
    limit: Int = 10
    "Number of events to skip for pagination (defaults to 0)"
    offset: Int = 0
  ): [Event!]!
  
  # Player queries
  "Get a specific player by ID"
  getPlayer(id: ID!): Player
  "Get a list of players with optional filtering and pagination"
  getPlayers(
    "Filter by player tier"
    tier: PlayerTier
    "Filter by region"
    region: String
    "Maximum number of players to return (defaults to 20)"
    limit: Int = 20
    "Number of players to skip for pagination (defaults to 0)"
    offset: Int = 0
  ): [Player!]!
  
  # Dashboard Analytics
  "Get dashboard statistics"
  getDashboardStats: DashboardStats!
  
  # Leaderboard Enhancements
  "Get leaderboard with sorting and filtering options"
  getLeaderboard(
    "Maximum number of entries to return (defaults to 50)"
    limit: Int = 50
    "Number of entries to skip for pagination (defaults to 0)"
    offset: Int = 0
    "Filter by player tier"
    tier: PlayerTier
    "Filter by region"
    region: String
    "Sort order (defaults to CURRENT_RP)"
    sortBy: LeaderboardSortBy = CURRENT_RP
  ): [LeaderboardEntry!]!
  
  "Get top performing players"
  getTopPlayers(
    "Maximum number of players to return (defaults to 10)"
    limit: Int = 10
    "Filter by player tier"
    tier: PlayerTier
  ): [LeaderboardEntry!]!
}

# =============================================================================
# MUTATION TYPE
# =============================================================================

"""
Root mutation type for the Bodega Cats GC GraphQL API.
Provides access to all write operations for creating, updating, and deleting data.
"""
type Mutation {
  # Match mutations
  "Create a new match"
  submitMatch(input: MatchInput!): Match!
  "Update an existing match"
  updateMatch(id: ID!, input: MatchUpdateInput!): Match!
  "Delete a match"
  deleteMatch(id: ID!): Boolean!
  "Submit player statistics for a match"
  submitMatchStats(matchId: ID!, stats: [PlayerMatchStatsInput!]!): [PlayerMatchStats!]!
  
  # Enhanced Match Operations
  "Start a match"
  startMatch(id: ID!): Match!
  "End a match with final scores"
  endMatch(id: ID!, scoreA: Int!, scoreB: Int!): Match!
  "Pause a match"
  pauseMatch(id: ID!): Match!
  "Resume a paused match"
  resumeMatch(id: ID!): Match!
  "Cancel a match"
  cancelMatch(id: ID!, reason: String!): Match!
  "Update match score"
  updateMatchScore(id: ID!, scoreA: Int!, scoreB: Int!): Match!
  "Update match time elapsed"
  updateMatchTime(id: ID!, timeElapsed: Int!): Match!
  
  # Player Management
  "Create a new player"
  createPlayer(input: PlayerInput!): Player!
  "Update an existing player"
  updatePlayer(id: ID!, input: PlayerUpdateInput!): Player!
  "Delete a player"
  deletePlayer(id: ID!): Boolean!
  
  # Player Statistics
  "Update player ranking points"
  updatePlayerRP(playerId: ID!, rpChange: Float!, reason: String!): Player!
  "Verify a player account"
  verifyPlayer(id: ID!): Player!
  "Assign a player to a team"
  assignPlayerToTeam(playerId: ID!, teamId: ID!): Player!
  "Remove a player from their current team"
  removePlayerFromCurrentTeam(playerId: ID!): Player!
  
  # Team Management
  "Create a new team"
  createTeam(input: TeamInput!): Team!
  "Update an existing team"
  updateTeam(id: ID!, input: TeamUpdateInput!): Team!
  "Delete a team"
  deleteTeam(id: ID!): Boolean!
  
  # Team Roster Management
  "Add a player to a team"
  addPlayerToTeam(teamId: ID!, playerId: ID!): Team!
  "Remove a player from a team"
  removePlayerFromTeam(teamId: ID!, playerId: ID!): Team!
  "Set a player as team captain"
  setTeamCaptain(teamId: ID!, playerId: ID!): Team!
  
  # Event Management
  "Create a new event"
  createEvent(input: EventInput!): Event!
  "Update an existing event"
  updateEvent(id: ID!, input: EventUpdateInput!): Event!
  "Delete an event"
  deleteEvent(id: ID!): Boolean!
  
  # Event Registration
  "Register a team for an event"
  registerTeamForEvent(eventId: ID!, teamId: ID!): Event!
  "Unregister a team from an event"
  unregisterTeamFromEvent(eventId: ID!, teamId: ID!): Event!
  
  # Event Lifecycle
  "Start an event"
  startEvent(id: ID!): Event!
  "End an event"
  endEvent(id: ID!): Event!
  "Cancel an event"
  cancelEvent(id: ID!, reason: String!): Event!
  
  # User mutations (admin only)
  "Create a new user (admin only)"
  createUser(input: UserInput!): User!
  "Update an existing user (admin only)"
  updateUser(id: ID!, input: UserUpdateInput!): User!
  "Delete a user (admin only)"
  deleteUser(id: ID!): Boolean!
} 